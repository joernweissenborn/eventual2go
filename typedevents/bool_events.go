
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package typedevents

import "github.com/joernweissenborn/eventual2go"



type BoolCompleter struct {
	*eventual2go.Completer
}

func NewBoolCompleter() *BoolCompleter {
	return &BoolCompleter{eventual2go.NewCompleter()}
}

func (c *BoolCompleter) Complete(d bool) {
	c.Completer.Complete(d)
}

func (c *BoolCompleter) Future() *BoolFuture {
	return &BoolFuture{c.Completer.Future()}
}

type BoolFuture struct {
	*eventual2go.Future
}

func (f *BoolFuture) Result() bool {
	return f.Future.Result().(bool)
}

type BoolCompletionHandler func(bool) bool

func (ch BoolCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(bool))
	}
}

func (f *BoolFuture) Then(ch BoolCompletionHandler) *BoolFuture {
	return &BoolFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *BoolFuture) AsChan() chan bool {
	c := make(chan bool, 1)
	cmpl := func(d chan bool) BoolCompletionHandler {
		return func(e bool) bool {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan bool) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type BoolStreamController struct {
	*eventual2go.StreamController
}

func NewBoolStreamController() *BoolStreamController {
	return &BoolStreamController{eventual2go.NewStreamController()}
}

func (sc *BoolStreamController) Add(d bool) {
	sc.StreamController.Add(d)
}

func (sc *BoolStreamController) Join(s *BoolStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *BoolStreamController) JoinFuture(f *BoolFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *BoolStreamController) Stream() *BoolStream {
	return &BoolStream{sc.StreamController.Stream()}
}

type BoolStream struct {
	*eventual2go.Stream
}

type BoolSubscriber func(bool)

func (l BoolSubscriber) toSubscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(bool)) }
}

func (s *BoolStream) Listen(ss BoolSubscriber) *eventual2go.Completer {
	return s.Stream.Listen(ss.toSubscriber())
}

func (s *BoolStream) ListenNonBlocking(ss BoolSubscriber) *eventual2go.Completer {
	return s.Stream.ListenNonBlocking(ss.toSubscriber())
}

type BoolFilter func(bool) bool

func (f BoolFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(bool)) }
}

func toBoolFilterArray(f ...BoolFilter) (filter []eventual2go.Filter){

	filter = make([]eventual2go.Filter, len(f))
	for i, el := range f {
		filter[i] = el.toFilter()
	}
	return
}

func (s *BoolStream) Where(f ...BoolFilter) *BoolStream {
	return &BoolStream{s.Stream.Where(toBoolFilterArray(f...)...)}
}

func (s *BoolStream) WhereNot(f ...BoolFilter) *BoolStream {
	return &BoolStream{s.Stream.WhereNot(toBoolFilterArray(f...)...)}
}

func (s *BoolStream) TransformWhere(t eventual2go.Transformer, f ...BoolFilter) *eventual2go.Stream {
	return s.Stream.TransformWhere(t, toBoolFilterArray(f...)...)
}

func (s *BoolStream) Split(f BoolFilter) (*BoolStream, *BoolStream)  {
	return s.Where(f), s.WhereNot(f)
}

func (s *BoolStream) First() *BoolFuture {
	return &BoolFuture{s.Stream.First()}
}

func (s *BoolStream) FirstWhere(f... BoolFilter) *BoolFuture {
	return &BoolFuture{s.Stream.FirstWhere(toBoolFilterArray(f...)...)}
}

func (s *BoolStream) FirstWhereNot(f ...BoolFilter) *BoolFuture {
	return &BoolFuture{s.Stream.FirstWhereNot(toBoolFilterArray(f...)...)}
}

func (s *BoolStream) AsChan() (c chan bool, stop *eventual2go.Completer) {
	c = make(chan bool)
	stop = s.Listen(pipeToBoolChan(c))
	stop.Future().Then(closeBoolChan(c))
	return
}

func pipeToBoolChan(c chan bool) BoolSubscriber {
	return func(d bool) {
		c <- d
	}
}

func closeBoolChan(c chan bool) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}

type BoolCollector struct {
	*eventual2go.Collector
}

func NewBoolCollector() *BoolCollector {
	return &BoolCollector{eventual2go.NewCollector()}
}

func (c *BoolCollector) Add(d bool) {
	c.Collector.Add(d)
}

func (c *BoolCollector) AddFuture(f *BoolFuture) {
	c.Collector.Add(f.Future)
}

func (c *BoolCollector) AddStream(s *BoolStream) {
	c.Collector.AddStream(s.Stream)
}

func (c *BoolCollector) Get() bool {
	return c.Collector.Get().(bool)
}

func (c *BoolCollector) Preview() bool {
	return c.Collector.Preview().(bool)
}

type BoolObservable struct {
	*eventual2go.Observable
}

func (o *BoolObservable) Value() bool {
	return o.Observable.Value().(bool)
}

func NewBoolObservable (value bool) (o *BoolObservable) {
	return &BoolObservable{eventual2go.NewObservable(value)}
}

func (o *BoolObservable) Change(value bool) {
	o.Observable.Change(value)
}

func (o *BoolObservable) OnChange(s BoolSubscriber) (cancel *eventual2go.Completer) {
	return o.OnChange(s)
}

func (o *BoolObservable) Stream() (*BoolStream) {
	return &BoolStream{o.Observable.Stream()}
}


func (o *BoolObservable) AsChan() (c chan bool, cancel *eventual2go.Completer) {
	return o.Stream().AsChan()
}

func (o *BoolObservable) NextChange() (f *BoolFuture) {
	return o.Stream().First()
}
