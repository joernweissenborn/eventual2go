
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package typed_events

import "github.com/joernweissenborn/eventual2go"



type BoolCompleter struct {
	*eventual2go.Completer
}

func (c *BoolCompleter) Complete(d bool) {
	c.Completer.Complete(d)
}

func (c *BoolCompleter) Future() *BoolFuture {
	return &BoolFuture{c.Completer.Future()}
}

type BoolFuture struct {
	*eventual2go.Future
}

type BoolCompletionHandler func(bool) bool

func (ch BoolCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(bool))
	}
}

func (f *BoolFuture) Then(ch BoolCompletionHandler) *BoolFuture {
	return &BoolFuture{f.Future.Then(ch.toCompletionHandler())}
}

type BoolStream struct {
	*eventual2go.Stream
}

type BoolSuscriber func(bool)

func (l BoolSuscriber) toSuscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(bool)) }
}

func (s *BoolStream) Listen(ss BoolSuscriber) *eventual2go.Subscription{
	return s.Stream.Listen(ss.toSuscriber())
}

type BoolFilter func(bool) bool

func (f BoolFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(bool)) }
}

func (s *BoolStream) Where(f BoolFilter) {
	s.Stream.Where(f.toFilter())
}

func (s *BoolStream) WhereNot(f BoolFilter) {
	s.Stream.WhereNot(f.toFilter())
}

func (s *BoolStream) First() *BoolFuture {
	return &BoolFuture{s.Stream.First()}
}

func (s *BoolStream) FirstWhere(f BoolFilter) *BoolFuture {
	return &BoolFuture{s.Stream.FirstWhere(f.toFilter())}
}

func (s *BoolStream) FirstWhereNot(f BoolFilter) *BoolFuture {
	return &BoolFuture{s.Stream.FirstWhereNot(f.toFilter())}
}

func (s *BoolStream) AsChan() (c chan bool) {
	c = make(chan bool)
	s.Listen(pipeToBoolChan(c)).Closed().Then(closeBoolChan(c))
	return
}

func pipeToBoolChan(c chan bool) BoolSuscriber {
	return func(d bool) {
		c<-d
	}
}

func closeBoolChan(c chan bool) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}

